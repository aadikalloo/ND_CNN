Note date: 8/19/2016
Dataset: Extracted1 (1000 training images)
  Used emarens 1 - 50
  Contains 452 Dermoscopy and 814 Non-Dermoscopy images
  Extracted1 contains images sorted by dermoscopy vs not dermoscopy
  For dermoscopic photos, those images containing excessive hair were removed from the dermoscopic set. 
  Those photos that were likely dermoscopic but were missing the scale bar were excluded
  Non-dermoscopic photos were reviewed to ensure no photos contained a dermoscopic scale bar
packages used: keras, theano, pandas, numpy

Note date: 8/21/2016
Dataset: Extracted 1 (1000 images) with horizontal and vertical flip augmentation; 4x increase
  Learning rate of 0.001 seemed to be best when testing runs of ~10 epochs but seems to be caught in local minima for epochs 35-55 and counting
  Many gpu memory allocation problems occured with respect to batch sizes over 32
  This method of augmentation ultimately did not work out

Note date: 8/21/2016
Dataset: Extracted 1 (1000 images) with Keras ImageDataGenerator augmentation
Files: nn3.py, nn3.txt
  Trained with 2024 images per epoch, batch size 48, 200 epochs
  Validation accuracy in the range of 93-95%
  Model saved as nn3.h5

Note date: 8/23/2016
Dataset: Extracted 1-8 (15000 total images)
Files: nn4.py, nn4.txt
  Trained with ~12000 images per epoch, batch size 48, 200 epochs
  Validation accuracy ~93-95%
  Model saved as nn4.h5
  Used on MEU dataset of ~12000 images and results were not as expected. Over 1000 images were misclassified (i.e. arm was classified as dermoscopic). 

Note date: 8/26/2016
Dataset: Extracted 1-8 + MEU (28000 total images)
Files: nn5.py, nn5.txt
  Trained with ~21000 images per epoch, batch size 32, 200 epochs
  Loss at ~0.1000 at epoch 23
  
To get ROC curve:
  y_score = my_model.predict_proba(X_val)
  then just use sklearn:
    sklearn.metrics.roc_auc_score
    sklearn.examples.plot_roc
